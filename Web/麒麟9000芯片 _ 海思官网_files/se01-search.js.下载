window.components = window.components || {};

window.components['se01-search'] = (function () {

    // The transition controller manages the page transitions and is unique to the component.
    var Se01SearchTransitionController = (function (TransitionController) {
        __extends(ComponentTransitionController, TransitionController);

        function ComponentTransitionController(parent, options) {
            TransitionController.call(this, parent, options);
        }

        ComponentTransitionController.prototype.setupTransitionInTimeline = function (timeline, parent, id) {
            // Setup the transition in timeline
        };

        ComponentTransitionController.prototype.setupTransitionOutTimeline = function (timeline, parent, id) {
            // Setup the transition out timeline
        };

        ComponentTransitionController.prototype.setupLoopingAnimationTimeline = function (timeline, parent, id) {
            // Setup the looping timeline
        };

        return ComponentTransitionController;
    })(TransitionController);


	/**
	 * Each component extends the AbstractComponent that holds some helper methods, for more information on animations
	 * you could take a look at the documentation.
	 *
	 * - https://github.com/larsvanbraam/transition-controller
	 * - http://greensock.com/
	 */
    return (function (AbstractComponent) {
        __extends(Se01Search, AbstractComponent);

        function Se01Search(element) {
            AbstractComponent.call(this, element);
        }

        Se01Search.prototype.handleResult = function (hasResult, searchId, keyword) {
            var searchInput = document.body.querySelector('#' + searchId + ' .js-input'),
                textPlaceholder = document.body.querySelector('#' + searchId + ' .js-placeholder'),
                inputLine = document.body.querySelector('#' + searchId + ' .js-line'),
                searchBox = document.body.querySelector('#' + searchId + ' .se01-search');

            searchInput.value = keyword;
            textPlaceholder.innerHTML = keyword;
            inputLine.style.width = textPlaceholder.clientWidth >= searchInput.clientWidth ? searchInput.clientWidth + 'px' : textPlaceholder.clientWidth + 'px';
            if (keyword && keyword !== 'undefined') {
                searchBox.classList.add('inputting');
            }
            if (hasResult) {
                this.updateBlocks('none', 'none', 'block', searchId);
            } else {
                document.body.querySelector('#' + searchId + ' .se01-search').classList.add('no-result');
                this.updateBlocks('block', 'none', 'none', searchId);
            }
        };

        Se01Search.prototype.updateStatus = function (tmpValue) {
            this.textPlaceholder.innerHTML = tmpValue;
            this.inputLine.style.width = this.textPlaceholder.clientWidth >= this.searchInput.clientWidth ? this.searchInput.clientWidth + 'px' : this.textPlaceholder.clientWidth + 'px';

            if (tmpValue.length > 0) {
                this.element.classList.add('inputting');
            } else {
                this.updateBlocks('block', 'none', 'none', this.searchId);
                this.element.classList.remove('inputting', 'no-result');
            }
        };

        Se01Search.prototype.updateBlocks = function (subLinks, autoFill, results, searchId) {
            var panel = '#' + searchId + ' .search-panel ';
            document.body.querySelector(panel + '.se03-sub-links').style.display = subLinks;
            //document.body.querySelector(panel + '.se02-autofill').style.display = autoFill;
            if (document.body.querySelector(panel + '.search-panel__results'))
                document.body.querySelector(panel + '.search-panel__results').style.display = results;
        };

        Se01Search.prototype.doSearch = function (value) {
            if (value === "" || /[&<>`"'?*\/]/.test(value)) {
                return;
            }

            //store the search history
            var searchHistory = JSON.parse(localStorage.getItem("search-history-" + document.getElementById("hidLanguage").value)) || [];
            searchHistory.unshift(value);
            if (searchHistory.length > 4) {
                searchHistory.pop();
            }
            localStorage.setItem('search-history-' + document.getElementById("hidLanguage").value, JSON.stringify(searchHistory));
            this.updateHistory(this.searchId);

            // if (this.searchId === 'popup-search') {
            var url = document.getElementById('js-search-url').value;
            window.location.href = url + "?keywords=" + encodeURIComponent(this.searchInput.value);
            // } else {
            // 	components['search'].prototype.getResult(value);
            // }
        };

        Se01Search.prototype.updateHistory = function (searchId) {
            var searchHistory = JSON.parse(localStorage.getItem('search-history-' + document.getElementById("hidLanguage").value));

            if (window.NodeList && !NodeList.prototype.forEach) {
                NodeList.prototype.forEach = Array.prototype.forEach;
            }

            var links = document.body.querySelector('#' + searchId + ' .js-sub-links-row'),
                historyDom = links.querySelector('.js-section-history');
            if (searchHistory) {
                if (!historyDom) {
                    var titleDom = document.createElement("h4"),
                        iconDom = document.createElement("span");
                    historyDom = document.createElement("div");
                    historyDom.classList.add('sub-links__section', 'js-section-history', 'js-section', 'col-large-4');
                    titleDom.classList.add('heading-04');
                    titleDom.innerHTML = document.getElementById("hidSearchHistory").value;
                    iconDom.classList.add('font-ico-cross', 'js-history-close');
                    titleDom.appendChild(iconDom);
                    historyDom.appendChild(titleDom);
                }

                if (historyDom.querySelectorAll('a')) {
                    historyDom.querySelectorAll('a').forEach(function (history) {
                        historyDom.removeChild(history);
                    });
                }
                var url = document.getElementById('js-search-url').value;
                searchHistory.forEach(function (history, index) {
                    var element = document.createElement('a');
                    element.classList.add('copy-01');
                    element.setAttribute('href', location.protocol + '//' + location.host + url + '?keywords=' + history.replace(/</g, "&lt;").replace(/>/g, "&gt;"));
                    element.innerHTML = history.replace(/</g, "&lt;").replace(/>/g, "&gt;");
                    historyDom.appendChild(element);
                });

                links.insertBefore(historyDom, links.childNodes[0]);

                document.body.querySelector('#' + searchId + ' .js-history-close').addEventListener('click', function () {
                    components['se03-sub-links'].prototype.deleteHistory(this);
                });
            }
        };

        Se01Search.prototype.charsAllowed = function (value) {
            return new RegExp(/^[a-zA-Z\s]+$/).test(value);
        };

        Se01Search.prototype.inputAutoComplete = function () {
            var countries = ['Afghanistan', 'Albania', 'Algeria', 'Argentina', 'Armenia', 'Australia', 'Austria', 'Azerbaijan', 'Bangladesh', 'Belarus', 'Belgium', 'Bolivia', 'Brazil', 'Bulgaria', 'Cameroon', 'Canada', 'Central African Republic', 'Chad', 'Chile', 'China', 'Colombia', 'Denmark', 'Dominica', 'Dominican Republic', 'Ecuador', 'Finland', 'France', 'Georgia', 'Germany', 'Gibraltar', 'Greece', 'Greenland', 'Guadeloupe', 'Guatemala', 'Guyana', 'Haiti', 'Iceland', 'India', 'Indonesia', 'Iraq', 'Ireland', 'Israel', 'Italy', 'Jamaica', 'Japan', 'Jersey', 'Jordan', 'Kazakhstan', 'Kenya', 'Laos', 'Latvia', 'Lebanon', 'Lesotho', 'Liberia', 'Mauritius', 'Mayotte', 'Mexico', 'Moldova', 'Norway', 'Palau', 'Paraguay', 'Poland', 'Portugal', 'Romania', 'Saint Helena', 'Saint Pierre and Miquelon', 'South Africa', 'South Georgia', 'South Korea', 'Spain', 'Sweden', 'Swaziland', 'Switzerland', 'United Kingdom', 'United States'];
            var items = countries.map(function (n) { return { label: n } });
            var _ = this;

            autocomplete({
                input: this.searchInput,
                minLength: 1,
                onSelect: function (item, inputfield) {
                    inputfield.value = item.label;
                    _.doSearch(inputfield.value);
                    _.updateStatus(inputfield.value);
                    //this is to go to top once an option is selected
                    inputfield.scrollIntoView();
                },
                fetch: function (text, callback) {
                    var match = text.toLowerCase(),
                        matchItems = items.filter(function (n) { return n.label.toLowerCase().indexOf(match) !== -1; });
                    callback(matchItems);
                    if (matchItems.length === 0) {
                        _.updateBlocks('block', 'none', 'none', _.searchId);
                        _.noMatches = true;
                    } else {
                        if (_.element.classList.contains('no-result')) {
                            _.element.classList.remove('no-result');
                        }
                        _.noMatches = false;
                        _.updateBlocks('none', 'block', 'none', _.searchId);
                    }
                },
                render: function (item, value) {
                    var itemElement = document.createElement('li');
                    itemElement.className += ' copy-01 js-result';
                    if (_.charsAllowed(value)) {
                        var regex = new RegExp(value, 'gi');
                        var inner = item.label.replace(regex, function (match) {
                            return '<span>' + match + '</span>';
                        });
                        itemElement.innerHTML = inner;
                    } else {
                        itemElement.textContent = item.label;
                    }
                    return itemElement;
                },
                customize: function (input, inputRect, container, maxHeight) {
                    document.body.querySelector('#' + _.searchId + ' .search-panel .se02-autofill .col-12').appendChild(container);
                    container.style.position = 'relative';
                    container.style.top = '0';
                    container.style.left = '0';
                    //this is to show all items in the mobile while keyboard is getting displayed
                    container.style.maxHeight = '380px';
                    container.style.overflow = 'hidden';
                    if (window.matchMedia('(max-width: 767px)').matches) {
                        container.style.paddingBottom = '220px';
                        container.style.maxHeight = '300px';
                    }
                }
            });
        };

        // The component has been initialised, create the transition controller
        Se01Search.prototype.init = function () {
            this.searchId = this.element.parentNode.parentNode.id;
            this.searchInput = this.getElement('#' + this.searchId + ' .js-input');
            this.textPlaceholder = this.getElement('#' + this.searchId + ' .js-placeholder');
            this.inputLine = this.getElement('#' + this.searchId + ' .js-line');
            this.resetBtn = this.getElement('#' + this.searchId + ' .js-reset-btn');
            this.noMatches = true;

            this.transitionController = new Se01SearchTransitionController(this, {
                name: this.componentId,
            });

            this.updateBlocks('block', 'none', 'none', this.searchId);

            this.searchInput.addEventListener('input', function (e) {
                this.updateStatus(e.target.value);
                e.preventDefault();
            }.bind(this));

            this.searchInput.addEventListener('keyup', function (e) {
                if (event.keyCode === 13) {
                    event.preventDefault();
                    if (e.target.value && this.noMatches) {
                        this.doSearch(e.target.value);
                    }
                }
            }.bind(this));

            this.resetBtn.addEventListener('click', function () {
                this.searchInput.value = '';
                this.updateStatus('');
            }.bind(this));

            //this.inputAutoComplete();
        };

        return Se01Search;
    })(AbstractComponent);
})();
