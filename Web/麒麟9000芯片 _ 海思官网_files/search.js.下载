window.components = window.components || {};

window.components['search'] = (function () {

    // The transition controller manages the page transitions and is unique to the component.
    var SearchTransitionController = (function (TransitionController) {
        __extends(ComponentTransitionController, TransitionController);

        function ComponentTransitionController(parent, options) {
            TransitionController.call(this, parent, options);
        }

        ComponentTransitionController.prototype.setupTransitionInTimeline = function (timeline, parent, id) {
            // Setup the transition in timeline
        };

        ComponentTransitionController.prototype.setupTransitionOutTimeline = function (timeline, parent, id) {
            // Setup the transition out timeline
        };

        ComponentTransitionController.prototype.setupLoopingAnimationTimeline = function (timeline, parent, id) {
            // Setup the looping timeline
        };

        return ComponentTransitionController;
    })(TransitionController);


	/**
	 * Each component extends the AbstractComponent that holds some helper methods, for more information on animations
	 * you could take a look at the documentation.
	 *
	 * - https://github.com/larsvanbraam/transition-controller
	 * - http://greensock.com/
	 */
    return (function (AbstractComponent) {
        __extends(Search, AbstractComponent);

        function Search(element) {
            AbstractComponent.call(this, element);
        }

        Search.prototype.handleResize = function () {
            //This is to avoid unnecesary resize events in android devices while displaying keyboards on textbox focus
            if (document.activeElement.getAttribute('type') !== 'text') {
                this.element.classList.remove(this.activeClass);
                bodyScrollLock.clearAllBodyScrollLocks();
            }
        };

        Search.prototype.updateResultItemList = function (data, container, isProduct, isAll) {
            if (isAll) {
                container.querySelector('.js-more-count-title').innerHTML = data.num + document.getElementById("hidFilterResult").value;
                itemsData = data.items;
            } else {
                container.querySelector('.js-se04-results-amount').innerHTML = data.length;
                itemsData = data;
            }

            var listDom = null;
            if (isProduct) {
                listDom = container.querySelector('.js-products');
                listDom.innerHTML = '';

                for (var i = 0; i < itemsData.length; i++) {
                    var titleDom = document.createElement("h4"),
                        subTitlDom = document.createElement("div"),
                        contentDom = document.createElement("h5"),
                        linkDom = document.createElement("a"),
                        itemDom = document.createElement("div"),
                        btnDom = document.createElement("div"),
                        iconDom = document.createElement("span");

                    titleDom.classList.add('heading-04', 'product-title');
                    titleDom.innerHTML = itemsData[i].title;
                    subTitlDom.classList.add('copy-01', 'product-features');
                    subTitlDom.innerHTML = itemsData[i].features;
                    contentDom.classList.add('heading-05', 'product-description');
                    contentDom.innerHTML = itemsData[i].description;
                    btnDom.classList.add('product-link', 'primary-button');
                    iconDom.classList.add('font-ico-arrow-right');
                    linkDom.classList.add('product-inner', 'js-product');
                    linkDom.setAttribute('href', itemsData[i].link);
                    if (isAll) {
                        itemDom.classList.add('product');
                    } else {
                        itemDom.classList.add('product', 'mobile-hide', 'js-mobile-hide');
                    }

                    btnDom.appendChild(iconDom);
                    linkDom.appendChild(titleDom);
                    linkDom.appendChild(subTitlDom);
                    linkDom.appendChild(contentDom);
                    linkDom.appendChild(btnDom);
                    itemDom.appendChild(linkDom);
                    listDom.appendChild(itemDom);
                }
            } else {
                listDom = isAll ? container.querySelector('.se05-results-preview__section') : container.querySelector('.se07-item-list .col-12');
                listDom.innerHTML = '';
                for (var j = 0; j < itemsData.length; j++) {
                    var listTitleDom = document.createElement("h4"),
                        listContentDom = document.createElement("p"),
                        listItemDom = document.createElement("li");

                    if (isAll) {
                        listItemDom.classList.add('js-transition-element');
                    }
                    listTitleDom.classList.add('heading-04');
                    listTitleDom.innerHTML = itemsData[j].subtitle;
                    listContentDom.classList.add('copy-01');
                    listContentDom.innerHTML = itemsData[j].content;
                    listItemDom.appendChild(listTitleDom);
                    listItemDom.appendChild(listContentDom);
                    listDom.appendChild(listItemDom);
                }
            }

            if (!isAll && itemsData.length > 3) {
                this.initPaination(container, itemsData.length);
            }
        };

        Search.prototype.updateResultAll = function (data, container) {
            //container.querySelector('.js-se04-results-amount').innerHTML = data.total;
            //this.updateResultItemList(data.scene, container.querySelector('[data-more-anchor="search-scene"]'), false, true);
            //this.updateResultItemList(data.solution, container.querySelector('[data-more-anchor="search-solution"]'), false, true);
            //this.updateResultItemList(data.media, container.querySelector('[data-more-anchor="search-media"]'), false, true);
            //this.updateResultItemList(data.other, container.querySelector('[data-more-anchor="search-other"]'), false, true);
            //this.updateResultItemList(data.product, container.querySelector('[data-more-anchor="search-product"]'), true, true);


        };

        Search.prototype.updatePainationItems = function (currentPage, basePerPage, items) {
            items.forEach(function (item, index) {
                if (Math.ceil((index + 1) / basePerPage) === currentPage) {
                    item.style.display = 'block';
                } else {
                    item.style.display = 'none';
                }
            });
        };

        Search.prototype.initPaination = function (container, num) {
            var isproduct = false;
            if (container && container.classList && container.classList.contains('js-search-container-product') == true)
                isproduct = true;

            var basePerPage = 9,
                totalPages = Math.ceil(num / basePerPage),
                _ = this,
                offSet = window.matchMedia('(max-width: 767px)').matches ? 2 : 3,
                pId = container.id + '-pagination',
                itemClass = isproduct ? '.js-products .product' : '.col-12 li';

            this.updatePainationItems(1, basePerPage, container.querySelectorAll(itemClass));

            // if (!this.pagination) {
            this.pagination = new Pagination({
                id: pId,
                currentPage: 1,
                totalPage: totalPages,
                offset: offSet,
                showPrev: true,
                showNext: true,
                pageChange: function (num) {
                    _.updatePainationItems(num, basePerPage, container.querySelectorAll(itemClass));
                    window.scroll({
                        behavior: 'smooth',
                        left: 0,
                        top: container.offsetTop
                    });
                }
            });
            // }
        };

        Search.prototype.handleResult = function (keyword) {
            //var resultContainer = document.body.querySelector('#result-search .search-panel__results'),
            //	resultAll = resultContainer.querySelector('[data-anchor="search-all"]'),
            //	resultScene = resultContainer.querySelector('[data-anchor="search-scene"]'),
            //	resultSolution = resultContainer.querySelector('[data-anchor="search-solution"]'),
            //	resultProduct = resultContainer.querySelector('[data-anchor="search-product"]'),
            //	resultMedia = resultContainer.querySelector('[data-anchor="search-media"]'),
            //	resultOther = resultContainer.querySelector('[data-anchor="search-other"]');

            //this.updateResultItemList(response.scene, resultScene, false, false);
            //this.updateResultItemList(response.solution, resultSolution, false, false);
            //this.updateResultItemList(response.media, resultMedia, false, false);
            //this.updateResultItemList(response.other, resultOther, false, false);
            //this.updateResultItemList(response.product, resultProduct, true, false);
            //this.updateResultAll(response.all, resultAll);

            var container = document.querySelectorAll(".js-search-container");
            for (var i = 0; i < container.length; i++) {
                var lis = container[i].querySelectorAll("li");
                var product = container[i].querySelectorAll(".product");
                var count = lis.length > 0 ? lis.length : product.length;
                if (count > 10) {
                    this.initPaination(container[i], count);
                }
            }
            var hasResult = document.getElementById("hidHasResult").value;
            components['se01-search'].prototype.handleResult(hasResult === "1", 'result-search', keyword);
        };

        Search.prototype.getResult = function (word) {
            //get the search keywords from url and ajax call the backend api to get the reslut. following is fake sample
            //var keyword = word || decodeURIComponent(window.location.search.split('keywords=')[1]),
            var keyword = document.getElementById("hidKeyword").value,
                _ = this;
            if (keyword && keyword !== 'undefined') {
                //fetch('/data/search.json', {
                //	method: 'GET',
                //	headers: {
                //	  'Content-Type': 'application/json'
                //	}
                //}).then(function (response) {
                //	return response.json();
                //}).then(function (result) {
                //	_.handleResult(result, keyword);
                //}, function (error) {
                //	//error handleing
                //	_.handleResult(null, keyword);
                //});
                //hidSearchCount
                try {
                    htag("Site Search", keyword, document.getElementById("hidSearchCount").value)
                } catch (e) {

                }
                _.handleResult(keyword);
            }
        };

        Search.prototype.closeSearchPanel = function () {
            this.element.classList.remove(this.activeClass);
            bodyScrollLock.clearAllBodyScrollLocks();
        };

        // The component has been initialised, create the transition controller
        Search.prototype.init = function () {
            if (this.element.parentNode.id === 'result-search') {
                this.getResult();
            } else {
                this.searchPanelClose = this.getElement('.js-search-panel-close');
                this.activeClass = 'is-active';
                this.searchPanelClose.addEventListener('click', this.closeSearchPanel.bind(this));
            }

            this.transitionController = new SearchTransitionController(this, {
                name: this.componentId,
            });

            components['se01-search'].prototype.updateHistory(this.element.parentNode.id);
            window.addEventListener('resize', __debounce(function () {
                this.handleResize();
            }.bind(this)), 100);
        };

        return Search;
    })(AbstractComponent);
})();
