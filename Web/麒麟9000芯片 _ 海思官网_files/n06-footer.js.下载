window.components = window.components || {};

window.components['n06-footer'] = (function () {

	// The transition controller manages the page transitions and is unique to the component.
	var N06FooterTransitionController = (function (TransitionController) {
		__extends(ComponentTransitionController, TransitionController);

		function ComponentTransitionController(parent, options) {
			TransitionController.call(this, parent, options);
		}

		return ComponentTransitionController;
	})(TransitionController);


	/**
	 * Each component extends the AbstractComponent that holds some helper methods, for more information on animations
	 * you could take a look at the documentation.
	 *
	 * - https://github.com/larsvanbraam/transition-controller
	 * - http://greensock.com/
	 */
	return (function (AbstractComponent) {
		__extends(N06Footer, AbstractComponent);

		function N06Footer(element) {
			AbstractComponent.call(this, element);
		}

		N06Footer.prototype.handleResize = function () {
			this.dropdownTrigger.forEach(function (dropdownTrigger) {
				dropdownTrigger.parentElement.classList.remove(this.activeClass);
				TweenMax.set(dropdownTrigger.nextElementSibling, {
					clearProps: 'all'
				});
			}.bind(this));
		};

		N06Footer.prototype.showDropdown = function (item) {
			TweenMax.set(item, {
				height: 'auto',
			});
			TweenMax.from(item, 0.6, {
				height: 0,
				ease: Expo.easeOut,
			});
		};

		N06Footer.prototype.hideDropdown = function (item) {
			TweenMax.to(item, 0.6, {
				height: 0,
				ease: Expo.easeOut,
				clearProps: 'all'
			});
		};

		N06Footer.prototype.handleDropdownToggle = function (clickedItemIndex) {
			if (window.matchMedia('(max-width: 1023px)').matches) {
				this.dropdownTrigger.forEach(function (dropdownTrigger, index) {
					if (index === clickedItemIndex && !dropdownTrigger.parentElement.classList.contains(this.activeClass)) {
						dropdownTrigger.parentElement.classList.add(this.activeClass);
						this.showDropdown(dropdownTrigger.nextElementSibling);
					} else if (dropdownTrigger.parentElement.classList.contains(this.activeClass)) {
						dropdownTrigger.parentElement.classList.remove(this.activeClass);
						this.hideDropdown(dropdownTrigger.nextElementSibling);
					}
				}.bind(this));
			}
		};

		N06Footer.prototype.handleLangToggle = function (clickedLangIndex, event) {
			event.stopPropagation();
			var lang = this.langItems[clickedLangIndex].getAttribute('data-lang');

			if (this.langItems[1].getAttribute('data-lang') === lang) {
				var tmpLang = this.langItems[0].innerHTML;

				this.langItems[1].innerHTML = tmpLang;
				this.langItems[1].setAttribute('data-lang', tmpLang);
				this.langItems[0].innerHTML = lang;
				this.langItems[0].setAttribute('data-lang', lang);
			}
			
			this.langWrap.classList.remove('is-active');
		}

		// The component has been initialised, create the transition controller
		N06Footer.prototype.init = function () {
			this.dropdownTrigger = this.getElements('.js-trigger');
			this.langItems = this.getElements('.js-language');
			this.langWrap = this.getElement('.js-language-wrap');
			this.activeClass = 'is-active';
			this.transitionController = new N06FooterTransitionController(this, {
				name: this.componentId,
			});

			if (this.dropdownTrigger) {
				this.dropdownTrigger.forEach(function (dropdownTrigger, index) {
					dropdownTrigger.addEventListener('click', this.handleDropdownToggle.bind(this, index, event));
				}.bind(this));
			}

			this.langWrap.addEventListener('click', function (e) {
				!this.classList.contains('is-active') && this.classList.add('is-active');
			});

			if (this.langItems) {
				this.langItems.forEach(function (langItem, index) {
					langItem.addEventListener('click', this.handleLangToggle.bind(this, index));
				}.bind(this));
			}

			window.addEventListener('resize', this.handleResize.bind(this));
		};

		return N06Footer;
	})(AbstractComponent);
})();
