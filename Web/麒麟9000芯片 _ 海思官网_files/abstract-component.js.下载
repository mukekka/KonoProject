// Keep track of the amount of components so each componentId is a 100% unique.
var COMPONENT_COUNTER = 0;

/**
 * This class is the base of all components that use the transition logic, it contains some helper methods that will
 * make everything just a little easier :)
 *
 * @param element - The root HTML element that wraps the component
 * @constructor
 */
window.AbstractComponent = (function () {
    function AbstractComponent(element) {
        this.element = element;
        this.componentId = element.dataset.component + '.' + COMPONENT_COUNTER++;
        this.hasEntered = false;

        this.enterViewThreshold = 0.25;
        this.inViewProgressThreshold = 0;
        this.currentViewProgress = 0;

        // The transition controller will be unique for each component
        this.transitionController = null;

        this.init();
    }

    /**
     * This method initiates the component, it should be overwritten in the parent class
     */
    AbstractComponent.prototype.init = function () {
        // Overwrite in the parent component
    };

    /**
     * Helper method to retrieve an HTML element
     *
     * @param querySelector - The query selector that you want to fire
     * @param parentElement - The element that holds the desired element.
     * @returns {Element|null}
     */
    AbstractComponent.prototype.getElement = function (querySelector, parentElement) {
        return (parentElement || this.element).querySelector(querySelector);
    };

    /**
     * Helper method to retrieve multiple HTML elements.
     *
     * @param querySelector - The query selector that you want to fire
     * @param parentElement - The element that holds the desired elements.
     * @returns {Array}
     */
    AbstractComponent.prototype.getElements = function (querySelector, parentElement) {
        return Array.from((parentElement || this.element).querySelectorAll(querySelector)) || [];
    };

    /**
     * Method that should be triggered once the component enters the viewport
     *
     * @returns Promise
     */
    AbstractComponent.prototype.enterView = function () {
        return this.transitionIn();
    };

    /**
     * Method that should be triggered once the component leaves the viewport
     */
    AbstractComponent.prototype.leaveView = function () {
        this.stopLoopingAnimation();
    };

    /**
     * Method that should be triggered once the component is instantly scrolled beyond the viewport
     */
    AbstractComponent.prototype.beyondView = function () {
        if (!this.hasEntered) {
            // Todo maybe seek to progress(1) to avoid (unnecessary) performance issue's
            this.transitionIn();
        }
    };

    /**
     * This method will triggered with the scroll progress
     * @param progress
     */
    AbstractComponent.prototype.inViewProgress = function (progress) {
        // This should be overwritten in the parent class.
    };

    /**
     * This method triggers the transitionIn on the transition controller and will start the in-animation
     *
     * @param forceTransition - When set to true it will abort the running animation and force the new one.
     * @returns Promise
     */
    AbstractComponent.prototype.transitionIn = function (forceTransition) {
        if (!this.transitionController) throw new Error('Create a transition controller before triggering transitionIn');
        return this.transitionController.transitionIn(forceTransition);
    };

    /**
     * This method triggers the transitionOut on the transition controller and will start the out-animation
     *
     * @param forceTransition - When set to true it will abort the running animation and force the new one.
     * @returns Promise
     */
    AbstractComponent.prototype.transitionOut = function (forceTransition) {
        if (!this.transitionController) throw new Error('Create a transition controller before triggering transitionOut');
        return this.transitionController.transitionOut(forceTransition);
    };

    /**
     * This method starts the looping animation.
     * @returns void
     */
    AbstractComponent.prototype.startLoopingAnimation = function () {
        if (!this.transitionController) throw new Error('Create a transition controller before starting the looping animations');
        return this.transitionController.startLoopingAnimation();
    };

    /**
     * This method stops the looping animations.
     * @returns void
     */
    AbstractComponent.prototype.stopLoopingAnimation = function () {
        if (!this.transitionController) throw new Error('Create a transition controller before stopping the looping animations');
        return this.transitionController.stopLoopingAnimation();
    };

    /**
     * This will clean the transition controller code and should be triggered if the element
     * leaves the DOM without a full refresh.
     */
    AbstractComponent.prototype.dispose = function () {
        if (this.transitionController) {
            this.transitionController.dispose();
        }
    };

    return AbstractComponent;
})();
